# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    image: '%kernel.project_dir%/public/upload'
    download: '%kernel.project_dir%\public\upload'
    locale: 'fr'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    login_listener:
        class: 'App\Listener\LoginListener'
        arguments: ['@fos_user.user_manager']
        tags:
            - { name: 'kernel.event_listener', event: 'security.interactive_login' }
            - { name: 'kernel.listener', event: 'fos_user.security.implicit_login' }

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }
    App\EventListener\LoginListener:
        tags:
            - { name: 'kernel.event_listener', event: 'security.interactive_login' }

    logout_handler:
        class: App\EventListener\LogoutListener
        arguments: ["@security.token_storage"]
    
    app.form.registration:
        class: App\Form\LoginType
        tags:
            - { name: 'form.type', alias: 'app_user_registration' }
    app.service.social:
        class: App\Service\SocialControl
        arguments: ['@doctrine']        
        